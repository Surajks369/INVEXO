<?php

namespace App\Http\Controllers;

use App\Models\ResearchReport;
use Illuminate\Support\Facades\Storage;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Illuminate\Support\Str;

class ResearchReportController extends Controller
{
    public function download($id, $token)
    {
        try {
            // Get the report
            $report = ResearchReport::where('id', $id)
                                ->where('status', 1) // Only active reports
                                ->firstOrFail();

            // Verify token
            $validToken = md5($report->id . $report->name . $report->created_at);
            if ($token !== substr($validToken, 0, 10)) {
                abort(403, 'Invalid token');
            }

            // Try both storage paths
            $filePath = storage_path('app/public/' . $report->report);
            $publicPath = public_path('storage/' . $report->report);
            
            // Check which path exists
            if (file_exists($filePath)) {
                $finalPath = $filePath;
            } elseif (file_exists($publicPath)) {
                $finalPath = $publicPath;
            } else {
                // Create storage link if it doesn't exist
                if (!file_exists(public_path('storage'))) {
                    symlink(storage_path('app/public'), public_path('storage'));
                }
                return back()->with('error', 'Report file not found. Please contact administrator.');
            }

            // Get file name with slug
            $fileName = Str::slug($report->name) . '.pdf';

            // Force download the file
            return response()->download($finalPath, $fileName, [
                'Content-Type' => 'application/pdf',
            'Content-Disposition' => 'attachment; filename="' . $fileName . '"',
            'Cache-Control' => 'no-store, no-cache, must-revalidate, max-age=0',
            'Pragma' => 'no-cache',
            'Expires' => '0',
        ]);
    }

    public function show($id)
    {
        // Check if user is authenticated
        if (!Auth::check()) {
            return redirect()->route('user.login');
        }

        $user = Auth::user();
        $today = now();
        
        // Check if user has active subscription
        if (!$user->renewal_date || $user->renewal_date < $today) {
            return redirect()->route('user.dashboard')->with('error', 'Your subscription has expired. Please renew to access reports.');
        }

        $report = ResearchReport::findOrFail($id);
        
        return view('research_report_detail', compact('report', 'user'));
    }
}
